[
    {
        "input": "Drop detection system (or sometimes simplified to just “system”)",
        "output": "A system for detecting dropped object(s) during robot placement motion. This includes detecting whether drops happened, and deciding which compartment each object has dropped into.",
        "instruction": ""
    },
    {
        "input": "Correct / desired compartment",
        "output": "The compartment that the robot intends to place the object into.",
        "instruction": ""
    },
    {
        "input": "Order",
        "output": "A collection of items assigned to a compartment that the robot needs to successfully pick and place into, before this group of items can be packed by a human packer. Note: this is an internal definition. The situation is a bit more complex when there’s splitting order into multiple compartments. Here we only consider each compartment independently.",
        "instruction": ""
    },
    {
        "input": "Hold",
        "output": "This is referring to a status on a specific compartment generated by our system. We generate “holds” on a specific compartment if our system detects that an item that does not belong to that compartment gets dropped into the compartment (also known as “wrong compartment”). Temporarily block the compartment from being packed due to a detected wrong compartment event, until bot-tender performs manual inspection and removes the block. Drops ≠ holds: if an item drops to the floor without triggering any light curtains, we won’t generate any holds. There are also a lot of false positives here due to faulty light curtains.",
        "instruction": ""
    },
    {
        "input": "Put Short Rate",
        "output": "This is a metric tracked by our system when a batch is closed. It results from 1. holds that cannot be remedied - in this case, the bot tender will need to manually resolve the holds by clicking “not found” at the GUI. 2. the item has never been picked by the robot. This can happen when a whole tote is missing.",
        "instruction": ""
    },
    {
        "input": "Trouble Rate",
        "output": "This is a top-level metric measured by our customers. They will open packed parcels downstream, and if a parcel is missing or has an extra item, it will be counted towards the trouble rate. The parcels will be sent to the “hospital” and require a lot of manual labor to be resolved. Parcels labeled with put short in our system will be counted towards the trouble rate automatically. However, put short ≠ trouble. Put shorts can be false positives, and our systems may fail to detect shorts/extras. This is a proxy metric for how many “wrong orders” we are generating.",
        "instruction": ""
    },
    {
        "input": "False alarm",
        "output": "System prediction caused unnecessary holds to be placed on one or more compartments. Unnecessary: bot-tender will not update any item counts in any compartments after manual inspection.",
        "instruction": ""
    },
    {
        "input": "Incorrect states",
        "output": "System prediction caused one or more compartments to have wrong item counts for one or more items, even after all requested human interventions have correctly finished.",
        "instruction": ""
    },
    {
        "input": "Light curtain system",
        "output": "A drop detection system primarily based on non-vision sensors, including suction gauge sensors and light curtains. This is the current generation of putwall drop detection system. Note: the name does not indicate that the system only looks at light curtain signals. In reality, it also incorporates suction gauge signals to decide whether an object has lost seal.",
        "instruction": ""
    },
    {
        "input": "Placement status",
        "output": "The overall status of all grasped objects after a robot placement attempt. In reality, this is represented by a list of object statuses. E.g. 1. No detection. The shelf/compartment light curtain of this compartment isn’t triggered during placing. 2. Wrong compartment. Unexpected item detected by Shelf/Compartment light curtain dropped into this compartment during placing.",
        "instruction": ""
    },
    {
        "input": "WMS",
        "output": "Warehouse Management System, used for communicating with our client’s server. WMS sends various kinds of messages to putwall application, including wave/batch/order…, and receives work status response from putwall application. WMS has ftp/sftp and socket interfaces. WMS creates wave/batch files and sends them to ftp/sftp server. Putwall application will scan ftp/sftp periodically (maybe 5s) and download the new files.",
        "instruction": ""
    },
    {
        "input": "Wave/Batch",
        "output": "Wave and batch are organizational units of orders. A wave file has a list of batches, a batch is a list of orders. Wave/batch file is a text file following a specific format. Generally, it contains fields like: wave_id, batch_id, parcel_id, sku, number_of_units, order_number, expected_weight…",
        "instruction": ""
    },
    {
        "input": "SKU",
        "output": "Stock Keeping Unit.",
        "instruction": ""
    },
    {
        "input": "UPC",
        "output": "Universal Product Code.",
        "instruction": ""
    },
    {
        "input": "Trouble rate == Parcel Short Rate == Hospital Rate",
        "output": "shorted orders / (# planned orders) When does it happen?   When a bot tender closes a batch, and an order does not have all items to complete the order, the order is parcel shorted == trouble == sent to the hospital.  On very rare occasions, a packer notices an incorrect number of items in the order when packing, and they will 'short' an order. This usually only happens when there is an egregious mismatch. A rough estimate would be >50% difference between expected vs real items in the order   Result: When an order is shorted, our station then sends the order 'to the hospital' where the required items to complete the order are found.",
        "instruction": ""
    },
    {
        "input": "Put Short Rate",
        "output": "shorted items / (# planned items)   same as parcel short, except at the item level.   We track put short rate over parcel rate because parcel rate is affected by the order size. Greater order size == greater parcel short rate because we have to be 'perfect for longer'. Thus put short rate is a more accurate depiction of our performance. However, our customer tracks parcel short rate.",
        "instruction": ""
    },
    {
        "input": "Wrong Order",
        "output": "When the compartment state (in software) does not match the physical state of the shelf, e.g., in software, we state there are 5 candles when, in fact, there are 4 candles. The order would also be 'wrong' if there were 5 wallflowers.   Important note, by definition, we are not able to identify a wrong order through software. We are only able to identify these by doing human audits.   Parcel Short != Wrong Order  The difference between wrong orders and parcel shorts is that in the case of a parcel short, our software knows that the order does not have enough items, and as a result, deliberately sends the order to the hospital. In the case of a wrong order, this simply means there is a mismatch in the shelf state between our software and the physical world. If the software state believes we have completed the order (despite it being wrong), we will not send the order to the hospital.   Wrong orders affecting parcel shorts  When an order is wrong, it can, in some cases, affect the parcel short rate.   Case: Affects parcel short rate We miss associate a barcode and place the wrong item in an order. In this case, another order needed that item, and thus will be missing it because it is in a different order incorrectly. That order will then be short and be sent to the hospital.   Case: Does not affect parcel short rate We try to place an item into a compartment, drop it, but think we successfully place. In this case, our software believes there are enough items in the order and would not send to the hospital.",
        "instruction": ""
    }
]